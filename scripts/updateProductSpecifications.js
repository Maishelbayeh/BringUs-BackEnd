const mongoose = require('mongoose');
const ProductSpecification = require('../Models/ProductSpecification');
const Category = require('../Models/Category');

// ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
const newSpecifications = [
  {
    titleAr: 'ÿßŸÑÿ≠ÿ¨ŸÖ',
    titleEn: 'Size',
    values: [
      { valueAr: 'ÿµÿ∫Ÿäÿ±', valueEn: 'Small' },
      { valueAr: 'Ÿàÿ≥ÿ∑', valueEn: 'Medium' },
      { valueAr: 'ŸÉÿ®Ÿäÿ±', valueEn: 'Large' },
      { valueAr: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã', valueEn: 'Extra Large' }
    ],
    sortOrder: 1,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑŸÑŸàŸÜ',
    titleEn: 'Color',
    values: [
      { valueAr: 'ÿ£ÿ≠ŸÖÿ±', valueEn: 'Red' },
      { valueAr: 'ÿ£ÿ≤ÿ±ŸÇ', valueEn: 'Blue' },
      { valueAr: 'ÿ£ÿÆÿ∂ÿ±', valueEn: 'Green' },
      { valueAr: 'ÿ£ÿµŸÅÿ±', valueEn: 'Yellow' },
      { valueAr: 'ÿ£ÿ≥ŸàÿØ', valueEn: 'Black' },
      { valueAr: 'ÿ£ÿ®Ÿäÿ∂', valueEn: 'White' },
      { valueAr: 'ÿ±ŸÖÿßÿØŸä', valueEn: 'Gray' },
      { valueAr: 'ÿ®ŸÜŸä', valueEn: 'Brown' }
    ],
    sortOrder: 2,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑŸÖÿßÿØÿ©',
    titleEn: 'Material',
    values: [
      { valueAr: 'ŸÇÿ∑ŸÜ', valueEn: 'Cotton' },
      { valueAr: 'ÿ®ŸàŸÑŸäÿ≥ÿ™ÿ±', valueEn: 'Polyester' },
      { valueAr: 'ÿµŸàŸÅ', valueEn: 'Wool' },
      { valueAr: 'ÿ≠ÿ±Ÿäÿ±', valueEn: 'Silk' },
      { valueAr: 'ÿ¨ŸÑÿØ', valueEn: 'Leather' },
      { valueAr: 'ÿ®ŸÑÿßÿ≥ÿ™ŸäŸÉ', valueEn: 'Plastic' },
      { valueAr: 'ÿÆÿ¥ÿ®', valueEn: 'Wood' },
      { valueAr: 'ŸÖÿπÿØŸÜ', valueEn: 'Metal' }
    ],
    sortOrder: 3,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑŸÜŸÖÿ∑',
    titleEn: 'Style',
    values: [
      { valueAr: 'ŸÉŸÑÿßÿ≥ŸäŸÉŸä', valueEn: 'Classic' },
      { valueAr: 'ÿπÿµÿ±Ÿä', valueEn: 'Modern' },
      { valueAr: 'ÿ±Ÿäÿßÿ∂Ÿä', valueEn: 'Sporty' },
      { valueAr: 'ÿ£ŸÜŸäŸÇ', valueEn: 'Elegant' },
      { valueAr: 'ŸÉÿßÿ¨ŸàÿßŸÑ', valueEn: 'Casual' },
      { valueAr: 'ÿ±ÿ≥ŸÖŸä', valueEn: 'Formal' }
    ],
    sortOrder: 4,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑŸàÿ≤ŸÜ',
    titleEn: 'Weight',
    values: [
      { valueAr: 'ÿÆŸÅŸäŸÅ', valueEn: 'Light' },
      { valueAr: 'ŸÖÿ™Ÿàÿ≥ÿ∑', valueEn: 'Medium' },
      { valueAr: 'ÿ´ŸÇŸäŸÑ', valueEn: 'Heavy' }
    ],
    sortOrder: 5,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑÿ∑ŸàŸÑ',
    titleEn: 'Length',
    values: [
      { valueAr: 'ŸÇÿµŸäÿ±', valueEn: 'Short' },
      { valueAr: 'ŸÖÿ™Ÿàÿ≥ÿ∑', valueEn: 'Medium' },
      { valueAr: 'ÿ∑ŸàŸäŸÑ', valueEn: 'Long' }
    ],
    sortOrder: 6,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑÿπÿ±ÿ∂',
    titleEn: 'Width',
    values: [
      { valueAr: 'ÿ∂ŸäŸÇ', valueEn: 'Narrow' },
      { valueAr: 'ÿπÿßÿØŸä', valueEn: 'Regular' },
      { valueAr: 'ÿπÿ±Ÿäÿ∂', valueEn: 'Wide' }
    ],
    sortOrder: 7,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑÿ∂ŸÖÿßŸÜ',
    titleEn: 'Warranty',
    values: [
      { valueAr: 'ŸÑÿß ŸäŸàÿ¨ÿØ ÿ∂ŸÖÿßŸÜ', valueEn: 'No Warranty' },
      { valueAr: 'ÿ∂ŸÖÿßŸÜ ÿ≥ŸÜÿ© Ÿàÿßÿ≠ÿØÿ©', valueEn: '1 Year Warranty' },
      { valueAr: 'ÿ∂ŸÖÿßŸÜ ÿ≥ŸÜÿ™ŸäŸÜ', valueEn: '2 Years Warranty' },
      { valueAr: 'ÿ∂ŸÖÿßŸÜ 3 ÿ≥ŸÜŸàÿßÿ™', valueEn: '3 Years Warranty' },
      { valueAr: 'ÿ∂ŸÖÿßŸÜ ŸÖÿØŸâ ÿßŸÑÿ≠Ÿäÿßÿ©', valueEn: 'Lifetime Warranty' }
    ],
    sortOrder: 8,
    isActive: true
  },
  {
    titleAr: 'ÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©',
    titleEn: 'Brand',
    values: [
      { valueAr: 'ŸÜÿßŸäŸÉ', valueEn: 'Nike' },
      { valueAr: 'ÿ£ÿØŸäÿØÿßÿ≥', valueEn: 'Adidas' },
      { valueAr: 'ÿ®ŸàŸÖÿß', valueEn: 'Puma' },
      { valueAr: 'ÿ£ŸÜÿØÿ± ÿ¢ÿ±ŸÖŸàÿ±', valueEn: 'Under Armour' },
      { valueAr: 'ŸÜŸäŸà ÿ®ÿßŸÑÿßŸÜÿ≥', valueEn: 'New Balance' },
      { valueAr: 'ŸÉŸàŸÜŸÅŸäÿ±ÿ≥', valueEn: 'Converse' },
      { valueAr: 'ŸÅÿßŸÜÿ≥', valueEn: 'Vans' },
      { valueAr: 'ÿ≥ŸÉŸäÿ™ÿ¥ÿ±ÿ≤', valueEn: 'Skechers' }
    ],
    sortOrder: 9,
    isActive: true
  },
  {
    titleAr: 'ŸÜŸàÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨',
    titleEn: 'Product Type',
    values: [
      { valueAr: 'ŸÖŸÑÿßÿ®ÿ≥', valueEn: 'Clothing' },
      { valueAr: 'ÿ£ÿ≠ÿ∞Ÿäÿ©', valueEn: 'Shoes' },
      { valueAr: 'ÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±ÿßÿ™', valueEn: 'Accessories' },
      { valueAr: 'ÿ£ÿ¨Ÿáÿ≤ÿ© ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©', valueEn: 'Electronics' },
      { valueAr: 'ÿ£ÿ´ÿßÿ´', valueEn: 'Furniture' },
      { valueAr: 'ÿ£ÿØŸàÿßÿ™ ŸÖŸÜÿ≤ŸÑŸäÿ©', valueEn: 'Home Appliances' },
      { valueAr: 'ŸÉÿ™ÿ®', valueEn: 'Books' },
      { valueAr: 'ÿ£ŸÑÿπÿßÿ®', valueEn: 'Toys' }
    ],
    sortOrder: 10,
    isActive: true
  }
];

async function updateProductSpecifications() {
  try {
    //CONSOLE.log('üîÑ Starting ProductSpecification update process...');
    
    // ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ©
    //CONSOLE.log('üóëÔ∏è Deleting existing specifications...');
    await ProductSpecification.deleteMany({});
    //CONSOLE.log('‚úÖ All existing specifications deleted');
    
    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ™ÿßÿ¨ÿ± ŸÖŸÜ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    const Store = require('../Models/Store');
    const stores = await Store.find({});
    
    if (stores.length === 0) {
      //CONSOLE.log('‚ö†Ô∏è No stores found. Please create stores first.');
      return;
    }
    
    //CONSOLE.log(`üìä Found ${stores.length} stores`);
    
    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ© ŸÑŸÉŸÑ ŸÖÿ™ÿ¨ÿ±
    let totalCreated = 0;
    
    for (const store of stores) {
      //CONSOLE.log(`üè™ Creating specifications for store: ${store.name} (${store._id})`);
      
      for (const spec of newSpecifications) {
        const newSpec = new ProductSpecification({
          ...spec,
          store: store._id
        });
        
        await newSpec.save();
        totalCreated++;
      }
      
      //CONSOLE.log(`‚úÖ Created ${newSpecifications.length} specifications for store: ${store.name}`);
    }
    
    //CONSOLE.log(`üéâ Successfully created ${totalCreated} specifications across ${stores.length} stores`);
    
    // ÿπÿ±ÿ∂ ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™
    const totalSpecs = await ProductSpecification.countDocuments();
    //CONSOLE.log(`üìà Total specifications in database: ${totalSpecs}`);
    
  } catch (error) {
    //CONSOLE.error('‚ùå Error updating product specifications:', error);
  } finally {
    mongoose.connection.close();
    //CONSOLE.log('üîå Database connection closed');
  }
}

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™
if (require.main === module) {
  // ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ - ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÜŸÅÿ≥ ÿßŸÑÿ±ÿßÿ®ÿ∑ ŸÖŸÜ server.js
  const MONGODB_URI = 'mongodb+srv://mais_helbayeh:ojTOYKEzJuyH1GCU@cluster0.9b4mdpc.mongodb.net/bringus?retryWrites=true&w=majority&appName=Cluster0';
  
  mongoose.connect(MONGODB_URI)
    .then(() => {
      //CONSOLE.log('üîó Connected to MongoDB');
      updateProductSpecifications();
    })
    .catch(err => {
      //CONSOLE.error('‚ùå Database connection error:', err);
      process.exit(1);
    });
}

module.exports = updateProductSpecifications; 